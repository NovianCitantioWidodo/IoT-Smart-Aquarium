"use strict";
var map, lat, lng, Datepicker = function() {
    var a = $(".datepicker");
    a.length && a.each(function() {
        $(this).datepicker({
            disableTouchKeyboard: !0,
            autoclose: !1
        })
    })
}(), CopyIcon = function() {
    var a, e = ".btn-icon-clipboard", t = $(e);
    t.length && ((a = t).tooltip().on("mouseleave", function() {
        a.tooltip("hide")
    }),
    new ClipboardJS(e).on("success", function(a) {
        $(a.trigger).attr("title", "Copied!").tooltip("_fixTitle").tooltip("show").attr("title", "Copy to clipboard").tooltip("_fixTitle"),
        a.clearSelection()
    }))
}(), FormControl = function() {
    var a = $(".form-control");
    a.length && a.on("focus blur", function(a) {
        $(this).parents(".form-group").toggleClass("focused", "focus" === a.type || 0 < this.value.length)
    }).trigger("blur")
}(), $map = $("#map-canvas"), color = "#5e72e4";
function initMap() {
    map = document.getElementById("map-canvas"),
    lat = map.getAttribute("data-lat"),
    lng = map.getAttribute("data-lng");
    var a = new google.maps.LatLng(lat,lng)
      , e = {
        zoom: 12,
        scrollwheel: !1,
        center: a,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        styles: [{
            featureType: "administrative",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#444444"
            }]
        }, {
            featureType: "landscape",
            elementType: "all",
            stylers: [{
                color: "#f2f2f2"
            }]
        }, {
            featureType: "poi",
            elementType: "all",
            stylers: [{
                visibility: "off"
            }]
        }, {
            featureType: "road",
            elementType: "all",
            stylers: [{
                saturation: -100
            }, {
                lightness: 45
            }]
        }, {
            featureType: "road.highway",
            elementType: "all",
            stylers: [{
                visibility: "simplified"
            }]
        }, {
            featureType: "road.arterial",
            elementType: "labels.icon",
            stylers: [{
                visibility: "off"
            }]
        }, {
            featureType: "transit",
            elementType: "all",
            stylers: [{
                visibility: "off"
            }]
        }, {
            featureType: "water",
            elementType: "all",
            stylers: [{
                color: color
            }, {
                visibility: "on"
            }]
        }]
    };
    map = new google.maps.Map(map,e);
    var t = new google.maps.Marker({
        position: a,
        map: map,
        animation: google.maps.Animation.DROP,
        title: "Hello World!"
    })
      , o = new google.maps.InfoWindow({
        content: '<div class="info-window-content"><h2>Argon Dashboard</h2><p>A beautiful Dashboard for Bootstrap 4. It is Free and Open Source.</p></div>'
    });
    google.maps.event.addListener(t, "click", function() {
        o.open(map, t)
    })
}
$map.length && google.maps.event.addDomListener(window, "load", initMap);
var Navbar = function() {
    var e = $(".navbar-nav, .navbar-nav .nav")
      , t = $(".navbar .collapse")
      , a = $(".navbar .dropdown");
    t.on({
        "show.bs.collapse": function() {
            var a;
            (a = $(this)).closest(e).find(t).not(a).collapse("hide")
        }
    }),
    a.on({
        "hide.bs.dropdown": function() {
            var a, e;
            a = $(this),
            (e = a.find(".dropdown-menu")).addClass("close"),
            setTimeout(function() {
                e.removeClass("close")
            }, 200)
        }
    })
}()
  , NavbarCollapse = function() {
    $(".navbar-nav");
    var a = $(".navbar .collapse");
    a.length && (a.on({
        "hide.bs.collapse": function() {
            a.addClass("collapsing-out")
        }
    }),
    a.on({
        "hidden.bs.collapse": function() {
            a.removeClass("collapsing-out")
        }
    }))
}()
  , Popover = function() {
    var a = $('[data-toggle="popover"]')
      , t = "";
    a.length && a.each(function() {
        !function(a) {
            a.data("color") && (t = "popover-" + a.data("color"));
            var e = {
                trigger: "focus",
                template: '<div class="popover ' + t + '" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            };
            a.popover(e)
        }($(this))
    })
}()
  , ScrollTo = function() {
    var a = $(".scroll-me, [data-scroll-to], .toc-entry a");
    a.length && a.on("click", function(a) {
        var e, t, o, r;
        t = (e = $(this)).attr("href"),
        o = e.data("scroll-to-offset") ? e.data("scroll-to-offset") : 0,
        r = {
            scrollTop: $(t).offset().top - o
        },
        $("html, body").stop(!0, !0).animate(r, 600),
        event.preventDefault()
    })
}()
  , Tooltip = function() {
    var a = $('[data-toggle="tooltip"]');
    a.length && a.tooltip()
}()
  , Charts = function() {
    var a, e = $('[data-toggle="chart"]'), t = {
        base: "Open Sans"
    }, o = {
        gray: {
            100: "#f6f9fc",
            200: "#e9ecef",
            300: "#dee2e6",
            400: "#ced4da",
            500: "#adb5bd",
            600: "#8898aa",
            700: "#525f7f",
            800: "#32325d",
            900: "#699d15"
        },
        theme: {
            default: "#172b4d",
            primary: "#699d15",
            secondary: "#f4f5f7",
            info: "#11cdef",
            success: "#2dce89",
            danger: "#f5365c",
            warning: "#fb6340"
        },
        black: "#12263F",
        white: "#FFFFFF",
        transparent: "transparent"
    };
    function r(a, e) {
        for (var t in e)
            "object" != typeof e[t] ? a[t] = e[t] : r(a[t], e[t])
    }
    return window.Chart && r(Chart, (a = {
        defaults: {
            global: {
                responsive: !0,
                maintainAspectRatio: !1,
                defaultColor: o.gray[600],
                defaultFontColor: o.gray[600],
                defaultFontFamily: t.base,
                defaultFontSize: 13,
                layout: {
                    padding: 0
                },
                legend: {
                    display: !1,
                    position: "bottom",
                    labels: {
                        usePointStyle: !0,
                        padding: 16
                    }
                },
                elements: {
                    point: {
                        radius: 0,
                        backgroundColor: o.theme.primary
                    },
                    line: {
                        tension: .4,
                        borderWidth: 4,
                        borderColor: o.theme.primary,
                        backgroundColor: o.transparent,
                        borderCapStyle: "rounded"
                    },
                    rectangle: {
                        backgroundColor: o.theme.warning
                    },
                    arc: {
                        backgroundColor: o.theme.primary,
                        borderColor: o.white,
                        borderWidth: 4
                    }
                },
                tooltips: {
                    enabled: !1,
                    mode: "index",
                    intersect: !1,
                    custom: function(o) {
                        var a = $("#chart-tooltip");
                        if (a.length || (a = $('<div id="chart-tooltip" class="popover bs-popover-top" role="tooltip"></div>'),
                        $("body").append(a)),
                        0 !== o.opacity) {
                            if (o.body) {
                                var e = o.title || []
                                  , r = o.body.map(function(a) {
                                    return a.lines
                                })
                                  , n = "";
                                n += '<div class="arrow"></div>',
                                e.forEach(function(a) {
                                    n += '<h3 class="popover-header text-center">' + a + "</h3>"
                                }),
                                r.forEach(function(a, e) {
                                    o.labelColors[e].backgroundColor;
                                    var t = 1 < r.length ? "justify-content-left" : "justify-content-center";
                                    n += '<div class="popover-body d-flex align-items-center ' + t + '"><span class="badge badge-dot"><i class="bg-primary"></i></span>' + a + "</div>"
                                }),
                                a.html(n)
                            }
                            var t = $(this._chart.canvas)
                              , l = (t.outerWidth(),
                            t.outerHeight(),
                            t.offset().top)
                              , s = t.offset().left
                              , i = a.outerWidth()
                              , c = a.outerHeight()
                              , d = l + o.caretY - c - 16
                              , p = s + o.caretX - i / 2;
                            a.css({
                                top: d + "px",
                                left: p + "px",
                                display: "block",
                                "z-index": "100"
                            })
                        } else
                            a.css("display", "none")
                    },
                    callbacks: {
                        label: function(a, e) {
                            var t = e.datasets[a.datasetIndex].label || ""
                              , o = a.yLabel
                              , r = "";
                            return 1 < e.datasets.length && (r += '<span class="badge badge-primary mr-auto">' + t + "</span>"),
                            r + '<span class="popover-body-value">' + o + "</span>"
                        }
                    }
                }
            },
            doughnut: {
                cutoutPercentage: 83,
                tooltips: {
                    callbacks: {
                        title: function(a, e) {
                            return e.labels[a[0].index]
                        },
                        label: function(a, e) {
                            return "" + '<span class="popover-body-value">' + e.datasets[0].data[a.index] + "</span>"
                        }
                    }
                },
                legendCallback: function(a) {
                    var o = a.data
                      , r = "";
                    return o.labels.forEach(function(a, e) {
                        var t = o.datasets[0].backgroundColor[e];
                        r += '<span class="chart-legend-item">',
                        r += '<i class="chart-legend-indicator" style="background-color: ' + t + '"></i>',
                        r += a,
                        r += "</span>"
                    }),
                    r
                }
            }
        }
    },
    Chart.scaleService.updateScaleDefaults("linear", {
        gridLines: {
            borderDash: [2],
            borderDashOffset: [2],
            color: o.gray[300],
            drawBorder: !1,
            drawTicks: !1,
            lineWidth: 0,
            zeroLineWidth: 0,
            zeroLineColor: o.gray[300],
            zeroLineBorderDash: [2],
            zeroLineBorderDashOffset: [2]
        },
        ticks: {
            beginAtZero: !0,
            padding: 10,
            callback: function(a) {
                if (!(a % 10))
                    return a
            }
        }
    }),
    Chart.scaleService.updateScaleDefaults("category", {
        gridLines: {
            drawBorder: !1,
            drawOnChartArea: !1,
            drawTicks: !1
        },
        ticks: {
            padding: 20
        },
        maxBarThickness: 10
    }),
    a)),
    e.on({
        change: function() {
            var a = $(this);
            a.is("[data-add]") && function(a) {
                var e = a.data("add")
                  , t = $(a.data("target")).data("chart");
                a.is(":checked") ? function a(e, t) {
                    for (var o in t)
                        Array.isArray(t[o]) ? t[o].forEach(function(a) {
                            e[o].push(a)
                        }) : a(e[o], t[o])
                }(t, e) : function a(e, t) {
                    for (var o in t)
                        Array.isArray(t[o]) ? t[o].forEach(function(a) {
                            e[o].pop()
                        }) : a(e[o], t[o])
                }(t, e),
                t.update()
            }(a)
        },
        click: function() {
            var a = $(this);
            a.is("[data-update]") && function(a) {
                var e = a.data("update")
                  , t = $(a.data("target")).data("chart");
                r(t, e),
                function(a, e) {
                    if (void 0 !== a.data("prefix") || void 0 !== a.data("prefix")) {
                        var n = a.data("prefix") ? a.data("prefix") : ""
                          , l = a.data("suffix") ? a.data("suffix") : "";
                        e.options.scales.yAxes[0].ticks.callback = function(a) {
                            if (!(a % 10))
                                return n + a + l
                        }
                        ,
                        e.options.tooltips.callbacks.label = function(a, e) {
                            var t = e.datasets[a.datasetIndex].label || ""
                              , o = a.yLabel
                              , r = "";
                            return 1 < e.datasets.length && (r += '<span class="popover-body-label mr-auto">' + t + "</span>"),
                            r + '<span class="popover-body-value">' + n + o + l + "</span>"
                        }
                    }
                }(a, t),
                t.update()
            }(a)
        }
    }),
    {
        colors: o,
        fonts: t,
        mode: "light"
    }
}()
  , JumlahPanen = function() {
    var a, e, t = $("#chart-panen");
    t.length && (a = t,
    e = new Chart(a,{
        type: "line",
        options: {
            scales: {
                yAxes: [{
                    gridLines: {
                        color: Charts.colors.gray[900],
                        zeroLineColor: Charts.colors.gray[900]
                    },
                    ticks: {
                        callback: function(a) {
                            if (!(a % 10))
                                return a + "kg"
                        }
                    }
                }]
            },
            tooltips: {
                callbacks: {
                    label: function(a, e) {
                        var t = e.datasets[a.datasetIndex].label || ""
                          , o = a.yLabel
                          , r = "";
                        return 1 < e.datasets.length && (r += '<span class="popover-body-label mr-auto">' + t + "</span>"),
                        r + '<span class="popover-body-value">' + o + "kg</span>"
                    }
                }
            }
        },
        data: {
            labels: ["May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            datasets: [{
                label: "Panen",
                // data statistik panen
                data: [0, 20, 22, 25, 35, 40, 20, 60, 70]
            }]
        }
    }),
    a.data("chart", e))
}();
